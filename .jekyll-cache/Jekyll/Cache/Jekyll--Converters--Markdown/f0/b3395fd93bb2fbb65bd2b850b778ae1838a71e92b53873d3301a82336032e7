I"܉<p>现在我们了解了角色控制器的基本碰撞处理，接下来马上就演示如何在Unity中实现上一章所展示的效果。</p>

<p>在开始以前，先确保你的Unity是否已经完成下载安装。这篇文章中所使用的版本是Unity 4.3.4f1。(检查Unity版本的方法是Help-&gt;About Unity)打开一个现有的工程或者创建一个新的来开始这篇教程。创建一个新的场景(Scene)，然后创建一个立方体(Cube)和一个球体(Sphere)。虽然我们最终会用胶囊体作为我们的控制器形状，但是刚开始还是让事情保持简单一些。将球体命名为Player，立方体命名为Wall。改变墙体每个轴的缩放到6。为了更加形象，我还给Player加了蓝色的材质，给Wall加了绿色的材质。将Player上的Sphere Collider组件移除掉。</p>

<p><img src="/img/character-controller/screen1.jpg" alt="" /></p>

<p>创建新的C#脚本，然后命名为SuperCharacterController.cs。为了表示我们的角色，拷贝和粘贴一下脚本，然后挂到Player身上：</p>

<figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
 
<span class="k">public</span> <span class="k">class</span> <span class="nc">SuperCharacterController</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
	 
	<span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span>
	<span class="kt">float</span> <span class="n">radius</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">;</span>
	 
	<span class="k">private</span> <span class="kt">bool</span> <span class="n">contact</span><span class="p">;</span>
	 
	<span class="c1">// Update is called once per frame</span>
	<span class="k">void</span> <span class="nf">Update</span> <span class="p">()</span> <span class="p">{</span>
		 
		<span class="n">contact</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
		 
		<span class="k">foreach</span> <span class="p">(</span><span class="n">Collider</span> <span class="n">col</span> <span class="k">in</span> <span class="n">Physics</span><span class="p">.</span><span class="nf">OverlapSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">))</span>
		<span class="p">{</span>
			<span class="n">Vector3</span> <span class="n">contactPoint</span> <span class="p">=</span> <span class="n">col</span><span class="p">.</span><span class="nf">ClosestPointOnBounds</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
			 
			<span class="n">Vector3</span> <span class="n">v</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">-</span> <span class="n">contactPoint</span><span class="p">;</span>
			 
			<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">+=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">ClampMagnitude</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">radius</span> <span class="p">-</span> <span class="n">v</span><span class="p">.</span><span class="n">magnitude</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">radius</span><span class="p">));</span>
			 
			<span class="n">contact</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	 
	<span class="k">void</span> <span class="nf">OnDrawGizmos</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">contact</span> <span class="p">?</span> <span class="n">Color</span><span class="p">.</span><span class="n">cyan</span> <span class="p">:</span> <span class="n">Color</span><span class="p">.</span><span class="n">yellow</span><span class="p">;</span>
		<span class="n">Gizmos</span><span class="p">.</span><span class="nf">DrawWireSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>然后就完了。运行项目并且打开场景。将Player往墙体的边缘慢慢拖过去。你可以看到墙体在反推，让Player总是停留在边缘。那么这里做了什么呢？</p>

<p>Physics.OverlapSphere返回了与球体发生碰撞的一组Collider。这是个很好用的函数，参数很简单。只需要传入球心与半径就可以了。</p>

<p>一旦检测到任何碰撞，我们就会开始处理。为了找到box collider上的最近点，我们用了ClosestPointOnBounds函数。紧接着我们就可以通过contactPoint得到我们的位置。contactPoint的长度就是我们所需要推出去的距离。</p>

<p>你可能会注意到，我实现了OnDrawGizmos函数，这样OverlapSphere的碰撞就一清二楚了。</p>

<p><img src="/img/character-controller/screen2.jpg" alt="" /></p>

<ul>
  <li>两帧演示了碰撞被检测，而后被处理</li>
</ul>

<p>相当简单。但是我们至今为止的胜利可能只是个开始。创建一个DebugDraw.cs的类，然后添加如下代码。</p>

<figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
 
<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DebugDraw</span> <span class="p">{</span>
	 
	<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">DrawMarker</span><span class="p">(</span><span class="n">Vector3</span> <span class="n">position</span><span class="p">,</span> <span class="kt">float</span> <span class="n">size</span><span class="p">,</span> <span class="n">Color</span> <span class="n">color</span><span class="p">,</span> <span class="kt">float</span> <span class="n">duration</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">depthTest</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Vector3</span> <span class="n">line1PosA</span> <span class="p">=</span> <span class="n">position</span> <span class="p">+</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">up</span> <span class="p">*</span> <span class="n">size</span> <span class="p">*</span> <span class="m">0.5f</span>
		<span class="n">Vector3</span> <span class="n">line1PosB</span> <span class="p">=</span> <span class="n">position</span> <span class="p">-</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">up</span> <span class="p">*</span> <span class="n">size</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
		 
		<span class="n">Vector3</span> <span class="n">line2PosA</span> <span class="p">=</span> <span class="n">position</span> <span class="p">+</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">right</span> <span class="p">*</span> <span class="n">size</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
		<span class="n">Vector3</span> <span class="n">line2PosB</span> <span class="p">=</span> <span class="n">position</span> <span class="p">-</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">right</span> <span class="p">*</span> <span class="n">size</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
		 
		<span class="n">Vector3</span> <span class="n">line3PosA</span> <span class="p">=</span> <span class="n">position</span> <span class="p">+</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span> <span class="p">*</span> <span class="n">size</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
		<span class="n">Vector3</span> <span class="n">line3PosB</span> <span class="p">=</span> <span class="n">position</span> <span class="p">-</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">forward</span> <span class="p">*</span> <span class="n">size</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
		 
		<span class="n">Debug</span><span class="p">.</span><span class="nf">DrawLine</span><span class="p">(</span><span class="n">line1PosA</span><span class="p">,</span> <span class="n">line1PosB</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">duration</span><span class="p">,</span> <span class="n">depthTest</span><span class="p">);</span>
		<span class="n">Debug</span><span class="p">.</span><span class="nf">DrawLine</span><span class="p">(</span><span class="n">line2PosA</span><span class="p">,</span> <span class="n">line2PosB</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">duration</span><span class="p">,</span> <span class="n">depthTest</span><span class="p">);</span>
		<span class="n">Debug</span><span class="p">.</span><span class="nf">DrawLine</span><span class="p">(</span><span class="n">line3PosA</span><span class="p">,</span> <span class="n">line3PosB</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">duration</span><span class="p">,</span> <span class="n">depthTest</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>这是一个我写的挺有用的帮助函数，它可以让我们在任何地方绘制在编辑器中(与此相对的，我们只能在OnDrawGizmos函数中绘制)。修改foreach循环如下。</p>

<figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">foreach</span> <span class="p">(</span><span class="n">Collider</span> <span class="n">col</span> <span class="k">in</span> <span class="n">Physics</span><span class="p">.</span><span class="nf">OverlapSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">))</span>
<span class="p">{</span>
	<span class="n">Vector3</span> <span class="n">contactPoint</span> <span class="p">=</span> <span class="n">col</span><span class="p">.</span><span class="nf">ClosestPointOnBounds</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
	 
	<span class="n">DebugDraw</span><span class="p">.</span><span class="nf">DrawMarker</span><span class="p">(</span><span class="n">contactPoint</span><span class="p">,</span> <span class="m">2.0f</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
	 
	<span class="n">Vector3</span> <span class="n">v</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">-</span> <span class="n">contactPoint</span><span class="p">;</span>
	 
	<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">+=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">ClampMagnitude</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">radius</span> <span class="p">-</span> <span class="n">v</span><span class="p">.</span><span class="n">magnitude</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">radius</span><span class="p">));</span>
	 
	<span class="n">contact</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>运行代码，你会注意到当碰撞发生的时候，会在位置上绘制一个红色十字标记。现在，拖动player到墙体内，就能看到标记跟随者player。这对于ClosestPointOnBounds函数来说也不完全是个错误，但是如果要对应上上回提到的退回策略，我们真的希望有一个ClosestPointOnSurfaceOfBoundsOrSomething函数。</p>

<p><img src="/img/character-controller/screen7.jpg" alt="" /></p>

<p>问题就在于当我们的角色在碰撞体内部的时候，随着返回最近点函数失效，没法正确地处理碰撞。现在，我们就来处理这个问题。</p>

<p>将我们的墙体在y轴上旋转大概20度，然后运行场景。你回发现一切都不正常了。这是因为ClosestPointOnBounds函数返回的最近点实在轴对齐包围盒(AABB)上，而不是朝向包围盒(OBB)上。</p>

<p><img src="/img/character-controller/screen3.jpg" alt="" /></p>

<p>你可能已经在想如果这个问题扩展一下，不仅仅是盒子会是怎样。由于函数只能返回轴对齐包围盒的最近点，哪怕是其他类型的碰撞，它也是肯定没法得到表面的最近点的。因此这个问题是没有银弹的(也许是我没发现)，我们只能每个碰撞类型自己实现。</p>

<p>先让我们从最简单的开始：球体碰撞。在场景中创建一个新的球体游戏对象。找到表面上的最近点需要好几步，每一步都比较简单。要知道哪个方向推出玩家，我们计算从我们为之到球体中心的方向。由于球体表面每个点距离球心都一样，我们只要正规化我们的向量，然后乘以半径以及local scale因子即可。</p>

<p>下面是代码实现。你可以看到新的方法中，多加了一个检测当前OverlapSphere的碰撞类型。</p>

<figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
 
<span class="k">public</span> <span class="k">class</span> <span class="nc">SuperCharacterController</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
	 
	<span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span>
	<span class="kt">float</span> <span class="n">radius</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">;</span>
	 
	<span class="k">private</span> <span class="kt">bool</span> <span class="n">contact</span><span class="p">;</span>
	 
	<span class="c1">// Update is called once per frame</span>
	<span class="k">void</span> <span class="nf">Update</span> <span class="p">()</span> <span class="p">{</span>
		 
		<span class="n">contact</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
		 
		<span class="k">foreach</span> <span class="p">(</span><span class="n">Collider</span> <span class="n">col</span> <span class="k">in</span> <span class="n">Physics</span><span class="p">.</span><span class="nf">OverlapSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">))</span>
		<span class="p">{</span>
			<span class="n">Vector3</span> <span class="n">contactPoint</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">;</span>
			 
			<span class="k">if</span> <span class="p">(</span><span class="n">col</span> <span class="k">is</span> <span class="n">BoxCollider</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">contactPoint</span> <span class="p">=</span> <span class="n">col</span><span class="p">.</span><span class="nf">ClosestPointOnBounds</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">col</span> <span class="k">is</span> <span class="n">SphereCollider</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">contactPoint</span> <span class="p">=</span> <span class="nf">ClosestPointOn</span><span class="p">((</span><span class="n">SphereCollider</span><span class="p">)</span><span class="n">col</span><span class="p">,</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
			<span class="p">}</span>
			 
			<span class="n">DebugDraw</span><span class="p">.</span><span class="nf">DrawMarker</span><span class="p">(</span><span class="n">contactPoint</span><span class="p">,</span> <span class="m">2.0f</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
			 
			<span class="n">Vector3</span> <span class="n">v</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">-</span> <span class="n">contactPoint</span><span class="p">;</span>
			 
			<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">+=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">ClampMagnitude</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">radius</span> <span class="p">-</span> <span class="n">v</span><span class="p">.</span><span class="n">magnitude</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">radius</span><span class="p">));</span>
			 
			<span class="n">contact</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	 
	<span class="n">Vector3</span> <span class="nf">ClosestPointOn</span><span class="p">(</span><span class="n">SphereCollider</span> <span class="n">collider</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">to</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Vector3</span> <span class="n">p</span><span class="p">;</span>
		 
		<span class="n">p</span> <span class="p">=</span> <span class="n">to</span> <span class="p">-</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
		<span class="n">p</span><span class="p">.</span><span class="nf">Normalize</span><span class="p">();</span>
		 
		<span class="n">p</span> <span class="p">*=</span> <span class="n">collider</span><span class="p">.</span><span class="n">radius</span> <span class="p">*</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">localScale</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
		<span class="n">p</span> <span class="p">+=</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
		 
		<span class="k">return</span> <span class="n">p</span><span class="p">;</span>
	<span class="p">}</span>
	 
	<span class="k">void</span> <span class="nf">OnDrawGizmos</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">contact</span> <span class="p">?</span> <span class="n">Color</span><span class="p">.</span><span class="n">cyan</span> <span class="p">:</span> <span class="n">Color</span><span class="p">.</span><span class="n">yellow</span><span class="p">;</span>
		<span class="n">Gizmos</span><span class="p">.</span><span class="nf">DrawWireSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>机智的读者可能会发现ClosestPointOn实际上返回的是球体表面的最近点。不像ClosestPointOnBounds返回的是包围盒的最近点。这很简单，但是在使用之前还有一些问题要解决。现在来看看第二种(也是今天的最后一种)碰撞类型的实现：朝向包围盒。</p>

<p><img src="/img/character-controller/screen5.jpg" alt="" /></p>

<ul>
  <li>图像演示了如何通过球心与控制器位置之间的向量推算出最近点</li>
</ul>

<p>我们的一般做法是获取输入，然后clamp到box内部。这样的效果与内建的ClosestPointOnBounds是一样的，除了即使box带旋转也能处理之外。</p>

<p>Box Collider的扩展定义了局部大小x、y和z。为了将我们的点clamp到Box Collider内部，我们需要将作为从世界坐标系转换到Box Collider的局部坐标系。在完成之后，我们对位置clamp到包围盒内即可。最后，我们再将改点转换回世界坐标系。代码如下。</p>

<figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
 
<span class="k">public</span> <span class="k">class</span> <span class="nc">SuperCharacterController</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="p">{</span>
 
	<span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span>
	<span class="kt">float</span> <span class="n">radius</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">;</span>
	 
	<span class="k">private</span> <span class="kt">bool</span> <span class="n">contact</span><span class="p">;</span>
	 
	<span class="c1">// Update is called once per frame</span>
	<span class="k">void</span> <span class="nf">Update</span> <span class="p">()</span> <span class="p">{</span>
		 
		<span class="n">contact</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
		 
		<span class="k">foreach</span> <span class="p">(</span><span class="n">Collider</span> <span class="n">col</span> <span class="k">in</span> <span class="n">Physics</span><span class="p">.</span><span class="nf">OverlapSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">))</span>
		<span class="p">{</span>
			<span class="n">Vector3</span> <span class="n">contactPoint</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">;</span>
			 
			<span class="k">if</span> <span class="p">(</span><span class="n">col</span> <span class="k">is</span> <span class="n">BoxCollider</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">contactPoint</span> <span class="p">=</span> <span class="nf">ClosestPointOn</span><span class="p">((</span><span class="n">BoxCollider</span><span class="p">)</span><span class="n">col</span><span class="p">,</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">col</span> <span class="k">is</span> <span class="n">SphereCollider</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">contactPoint</span> <span class="p">=</span> <span class="nf">ClosestPointOn</span><span class="p">((</span><span class="n">SphereCollider</span><span class="p">)</span><span class="n">col</span><span class="p">,</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">);</span>
			<span class="p">}</span>
			 
			<span class="n">DebugDraw</span><span class="p">.</span><span class="nf">DrawMarker</span><span class="p">(</span><span class="n">contactPoint</span><span class="p">,</span> <span class="m">2.0f</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
			 
			<span class="n">Vector3</span> <span class="n">v</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">-</span> <span class="n">contactPoint</span><span class="p">;</span>
			 
			<span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">+=</span> <span class="n">Vector3</span><span class="p">.</span><span class="nf">ClampMagnitude</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">radius</span> <span class="p">-</span> <span class="n">v</span><span class="p">.</span><span class="n">magnitude</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">radius</span><span class="p">));</span>
			 
			<span class="n">contact</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	 
	<span class="n">Vector3</span> <span class="nf">ClosestPointOn</span><span class="p">(</span><span class="n">BoxCollider</span> <span class="n">collider</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">to</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="p">==</span> <span class="n">Quaternion</span><span class="p">.</span><span class="n">identity</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="n">collider</span><span class="p">.</span><span class="nf">ClosestPointOnBounds</span><span class="p">(</span><span class="n">to</span><span class="p">);</span>
		<span class="p">}</span>
		 
		<span class="k">return</span> <span class="nf">closestPointOnOBB</span><span class="p">(</span><span class="n">collider</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
	<span class="p">}</span>
	 
	<span class="n">Vector3</span> <span class="nf">ClosestPointOn</span><span class="p">(</span><span class="n">SphereCollider</span> <span class="n">collider</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">to</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Vector3</span> <span class="n">p</span><span class="p">;</span>
		 
		<span class="n">p</span> <span class="p">=</span> <span class="n">to</span> <span class="p">-</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
		<span class="n">p</span><span class="p">.</span><span class="nf">Normalize</span><span class="p">();</span>
		 
		<span class="n">p</span> <span class="p">*=</span> <span class="n">collider</span><span class="p">.</span><span class="n">radius</span> <span class="p">*</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">localScale</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
		<span class="n">p</span> <span class="p">+=</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
		 
		<span class="k">return</span> <span class="n">p</span><span class="p">;</span>
	<span class="p">}</span>
	 
	<span class="n">Vector3</span> <span class="nf">closestPointOnOBB</span><span class="p">(</span><span class="n">BoxCollider</span> <span class="n">collider</span><span class="p">,</span> <span class="n">Vector3</span> <span class="n">to</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">// Cache the collider transform</span>
		<span class="kt">var</span> <span class="n">ct</span> <span class="p">=</span> <span class="n">collider</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
		 
		<span class="c1">// Firstly, transform the point into the space of the collider</span>
		<span class="kt">var</span> <span class="n">local</span> <span class="p">=</span> <span class="n">ct</span><span class="p">.</span><span class="nf">InverseTransformPoint</span><span class="p">(</span><span class="n">to</span><span class="p">);</span>
		 
		<span class="c1">// Now, shift it to be in the center of the box</span>
		<span class="n">local</span> <span class="p">-=</span> <span class="n">collider</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
		 
		<span class="c1">// Inverse scale it by the colliders scale</span>
		<span class="kt">var</span> <span class="n">localNorm</span> <span class="p">=</span>
		<span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span>
		<span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">local</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="p">-</span><span class="n">collider</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">,</span> <span class="n">collider</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">),</span>
		<span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">local</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="p">-</span><span class="n">collider</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">y</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">,</span> <span class="n">collider</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">y</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">),</span>
		<span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">local</span><span class="p">.</span><span class="n">z</span><span class="p">,</span> <span class="p">-</span><span class="n">collider</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">z</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">,</span> <span class="n">collider</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">z</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">)</span>
		<span class="p">);</span>
		 
		<span class="c1">// Now we undo our transformations</span>
		<span class="n">localNorm</span> <span class="p">+=</span> <span class="n">collider</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
		 
		<span class="c1">// Return resulting point</span>
		<span class="k">return</span> <span class="n">ct</span><span class="p">.</span><span class="nf">TransformPoint</span><span class="p">(</span><span class="n">localNorm</span><span class="p">);</span>
	<span class="p">}</span>
	 
	<span class="k">void</span> <span class="nf">OnDrawGizmos</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Gizmos</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">contact</span> <span class="p">?</span> <span class="n">Color</span><span class="p">.</span><span class="n">cyan</span> <span class="p">:</span> <span class="n">Color</span><span class="p">.</span><span class="n">yellow</span><span class="p">;</span>
		<span class="n">Gizmos</span><span class="p">.</span><span class="nf">DrawWireSphere</span><span class="p">(</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>你可能会注意到在主碰撞循环中做了一些修改，使得我们不管是轴对齐还是朝向的用ClosesPointOn就可以了。这里的大部分实现都参考自fholm的RPGController package。</p>

<p><img src="/img/character-controller/screen6.jpg" alt="" /></p>

<p>到这里我们第一部分的实现就结束了。在后面的文章中，我会讲讲Unity物理API会遇到的一些问题。然后开始为实现理想中的角色控制器开发一些组件。</p>

<h3 id="参考">参考</h3>

<p>这篇文章主要的代码参考自fholm的<a href="https://github.com/fholm/unityassets">RPGController package</a>。其中的推出来自RPGMotor.cs，最近点来自RPGCollisions.cs。</p>

:ET